Here is a high-level approach to implement the image rotation with mouse in Python using PyQt5 and PIL:

# Imports
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QPushButton
from PyQt5.QtGui import QImage, QMouseEvent, QTransform
from PyQt5.QtCore import Qt, QEvent
from PIL import Image, ImageQt

class Window(QWidget):
   def __init__(self):
       # Initial PyQt5 setup
       ...

       # Initialize PIL image
       self.rotated_img = None

       # Create labels
       self.image_label = QLabel(self)
       self.rotated_label = QLabel(self)

       ...

   def mousePressEvent(self, event: QMouseEvent):
       # Get mouse press position
       self.press_pos = event.pos()
       self.mouse_down = True

   def mouseReleaseEvent(self, event: QMouseEvent):
       self.mouse_down = False

   def mouseMoveEvent(self, event: QMouseEvent) -> None:
       if self.mouse_down:
           # Calculate angle of rotation
           angle = self.calculate_angle(event.pos(), self.press_pos)

           # Rotate PIL image
           self.rotated_img = self.apply_rotation(self.image, angle)

           # Update UI
           self.rotated_label.setPixmap(QPixmap(ImageQt(self.rotated_img)).scaledToWidth(300))

   def calculate_angle(self, pos, press_pos):
       # Calculate angle based on mouse delta
       return -(pos.x() - press_pos.x()) / (abs(pos.y() - press_pos.y()) + 1e-10)

   def apply_rotation(self, img, angle):
       # Rotate PIL image with the given angle
       rotated = img.rotate(angle)
       return rotated.resize(img.size, Image.BILINEAR)

   ...
You
write Python code with PyQt5 and PIL for load image from file, then rotate it with mouse on some angle and save result to new file

AI
You
write Python code with PyQt5 and PIL for load image from file, then rotate it with mouse on some angle and save result to new file. I have part of this code^

Imports
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QPushButton

from PyQt5.QtGui import QImage, QMouseEvent, QTransform

from PyQt5.QtCore import Qt, QEvent

from PIL import Image, ImageQt

class Window(QWidget):

def init(self):

   # Initial PyQt5 setup

   ...



   # Initialize PIL image

   self.rotated_img = None



   # Create labels

   self.image_label = QLabel(self)

   self.rotated_label = QLabel(self)



   ...
def mousePressEvent(self, event: QMouseEvent):

   # Get mouse press position

   self.press_pos = event.pos()

   self.mouse_down = True
def mouseReleaseEvent(self, event: QMouseEvent):

   self.mouse_down = False
def mouseMoveEvent(self, event: QMouseEvent) -> None:

   if self.mouse_down:

       # Calculate angle of rotation

       angle = self.calculate_angle(event.pos(), self.press_pos)



       # Rotate PIL image

       self.rotated_img = self.apply_rotation(self.image, angle)



       # Update UI

       self.rotated_label.setPixmap(QPixmap(ImageQt(self.rotated_img)).scaledToWidth(300))
def calculate_angle(self, pos, press_pos):

   # Calculate angle based on mouse delta

   return -(pos.x() - press_pos.x()) / (abs(pos.y() - press_pos.y()) + 1e-10)
def apply_rotation(self, img, angle):

   # Rotate PIL image with the given angle

   rotated = img.rotate(angle)

   return rotated.resize(img.size, Image.BILINEAR)
AI
Here is how you can save the rotated image to a new file after completing the rotation:

# Add these methods to the Window class
def save_rotated_image(self):
   # Get file path to save
   fileName, _ = QFileDialog.getSaveFileName(self, 'Save Image', '', 'Image Files (*.png *.jpg *.bmp)')

   if fileName:
       self.rotated_img.save(fileName, 'JPEG')
       print(f"Image saved to {fileName}")

def closeEvent(self, event):
   self.save_rotated_image()
   super().closeEvent(event)
The save_rotated_image method uses QFileDialog to let the user choose a file to save, then calls save on the PIL image to save the rotated version to the chosen filepath. Make sure to call this method before closing the window in the closeEvent to capture the final rotated image.

Let me know if you need any clarification or have additional questions!

You
can you add the buttons for load and save?

AI
Sure, here is how you can add buttons for loading an image and saving the rotated image in the PyQt5 UI:

# In the Window constructor
...

# Create widgets
self.load_btn = QPushButton("Load Image", self)
self.save_btn = QPushButton("Save Rotated", self)

# Layout
horizontal_layout = QHBoxLayout()
horizontal_layout.addWidget(self.load_btn)
horizontal_layout.addWidget(self.save_btn)
self.image_label.setLayout(horizontal_layout)  # To align buttons with image

# Connect signals to slots
self.load_btn.clicked.connect(self.load_image)
self.save_btn.clicked.connect(self.save_rotated_image)
The load_btn triggers a load_image method that would open a file dialog to choose an image and update self.image with the loaded PIL image. The save_btn connects to the existing save_rotated_image method to save the rotated image upon click.

The layout ensures the buttons are aligned with the image displayed in the image_label. Let me know if you have any other questions!

Show controls (Ctrl+S)
☰


/// Pulse GPT
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QPushButton, QFileDialog
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
from PIL import Image

class ImageRotateApp(QWidget):
    def __init__(self):
        super().__init__()
        self.image_path = None
        self.angle = 0

        self.initUI()

    def initUI(self):
        self.setWindowTitle('Image Rotation App')
        layout = QVBoxLayout()

        self.image_label = QLabel()
        layout.addWidget(self.image_label)

        open_button = QPushButton('Open Image')
        open_button.clicked.connect(self.openImage)
        layout.addWidget(open_button)

        rotate_button = QPushButton('Rotate Image')
        rotate_button.clicked.connect(self.rotateImage)
        layout.addWidget(rotate_button)

        save_button = QPushButton('Save Image')
        save_button.clicked.connect(self.saveImage)
        layout.addWidget(save_button)

        self.setLayout(layout)

    def openImage(self):
        file_dialog = QFileDialog()
        self.image_path, _ = file_dialog.getOpenFileName(self, 'Open Image', '', 'Image files (*.jpg *.png)')

        pixmap = QPixmap(self.image_path)
        self.image_label.setPixmap(pixmap)
        self.image_label.setAlignment(Qt.AlignCenter)

    def rotateImage(self):
        if self.image_path:
            image = Image.open(self.image_path)
            self.angle += 90
            rotated_image = image.rotate(self.angle, expand=True)
            rotated_image.show()

    def saveImage(self):
        if self.image_path:
            image = Image.open(self.image_path)
            image.save('rotated_image.jpg')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = ImageRotateApp()
    window.show()
    sys.exit(app.exec_())



Такой вопрос в объекте imageviewer происходит добавление на изображение линий разреза, в классе
проект нужно записать эти линии в список actions по индексу который соответствует этому изображению.
Как это сделать если Imageviewer является вызываемым по отношению к проекту, или подскажи как улучшить
логику хранения позиций разреза для нескольких изображений.


1. Использование Observer (наблюдатель)
Можно сделать так, чтобы ImageViewer уведомлял Project о новых линиях разреза через callback-функцию.

Пример кода:

class ImageViewer:
    def __init__(self, image_index, on_cut_added=None):
        self.image_index = image_index  # Индекс изображения в Project
        self.on_cut_added = on_cut_added  # Callback-функция
        self.cuts = []  # Список линий разреза

    def add_cut(self, cut):
        self.cuts.append(cut)
        if self.on_cut_added:
            self.on_cut_added(self.image_index, cut)  # Сообщаем Project
В Project передаем callback:

class Project:
    def __init__(self):
        self.actions = {}  # {индекс_изображения: [список разрезов]}

    def add_cut_to_image(self, image_index, cut):
        if image_index not in self.actions:
            self.actions[image_index] = []
        self.actions[image_index].append(cut)

    def create_viewer(self, image_index):
        return ImageViewer(image_index, self.add_cut_to_image)
Теперь ImageViewer просто вызывает on_cut_added(image_index, cut), и разрез сохраняется в Project.
Как это работает?

ImageViewer получает on_cut_added (ссылку на Project.add_cut_to_image).
Когда в ImageViewer добавляется линия разреза, вызывается self.on_cut_added(self.image_index, cut).
Project.add_cut_to_image обновляет actions.

Если передаешь callback в метод, указывай его тип:


from typing import Callable

class ImageViewer:
    def __init__(self, image_index: int, on_cut_added: Callable[[int, str], None]):
        self.image_index = image_index
        self.on_cut_added = on_cut_added  # Callback

    def add_cut(self, cut: str):
        if self.on_cut_added:
            self.on_cut_added(self.image_index, cut)
Это делает код читаемым и понятным для разработчиков.

Вариант 2: Используем NamedTuple (более строгий вариант)
Если хочешь строгую типизацию, лучше использовать NamedTuple.

from typing import NamedTuple, Union

class Action(NamedTuple):
    type: str  # "cut", "crop", "rotate"
    value: Union[int, tuple]  # Число или кортеж

class ImageViewer:
    def __init__(self, image_index, on_action_added):
        self.image_index = image_index
        self.on_action_added = on_action_added  # Callback

    def add_cut(self, position: int):
        action = Action(type="cut", value=position)
        self.on_action_added(self.image_index, action)

    def crop_image(self, coords: tuple):
        action = Action(type="crop", value=coords)
        self.on_action_added(self.image_index, action)

class Project:
    def __init__(self):
        self.actions = {}

        def add_action_to_image(self, image_index, action: Action):
        if image_index not in self.actions:
            self.actions[image_index] = []
        self.actions[image_index].append(action)
        print(f"Добавлена операция: {action} для изображения {image_index}")

    def create_viewer(self, image_index):
        return ImageViewer(image_index, self.add_action_to_image)

# ✅ Тестируем
project = Project()
viewer = project.create_viewer(0)

viewer.add_cut(120)
viewer.crop_image((50, 50, 400, 400))

print(project.actions)
# {0: [Action(type='cut', value=120), Action(type='crop', value=(50, 50, 400, 400))]}
🔹 Плюсы этого подхода
✅ Типизация – Python проверяет, что передаются правильные данные.
✅ Более читаемый код (можно делать action.type, action.value).

Вот финальная реализация для твоего случая:

from typing import NamedTuple, Union

class Action(NamedTuple):
    type: str  # Тип операции: "cut", "crop" и т. д.
    value: Union[int, tuple]  # Число (разрез) или кортеж (обрезка)

# ✅ Используем
action1 = Action("cut", 150)
action2 = Action("crop", (10, 20, 200, 300))

print(action1)  # Action(type='cut', value=150)
print(action2)  # Action(type='crop', value=(10, 20, 200, 300))
🔹 Как интегрировать в твой код?
Теперь в классе Project можно хранить действия в виде списка NamedTuple:

class Project:
    def __init__(self):
        self.actions = {}  # {индекс_изображения: [список операций]}

    def add_action_to_image(self, image_index: int, action: Action):
        if image_index not in self.actions:
            self.actions[image_index] = []
        self.actions[image_index].append(action)
        print(f"Добавлена операция: {action} для изображения {image_index}")

# ✅ Используем
project = Project()
project.add_action_to_image(0, Action("cut", 150))
project.add_action_to_image(0, Action("crop", (10, 20, 200, 300)))

print(project.actions)
# {0: [Action(type='cut', value=150), Action(type='crop', value=(10, 20, 200, 300))]}

В моем коде добавления линии разреза я пока не понимаю когда передать позицию разреза,
по отпусканию мышки при её перетаскивании либо при нажатии определенной кнопки фиксирующей изменения,
как будет лучше?

🔹 1. Фиксировать разрез при отпускании мышки (mouse release)
📌 Как работает:

Пользователь зажимает левую кнопку мыши и перетаскивает линию разреза.
Когда он отпускает кнопку мыши, позиция разреза фиксируется и передается в actions.
✅ Плюсы:
✔ Интуитивно понятно – пользователь сразу видит результат.
✔ Минимум действий – разрез фиксируется автоматически.
✔ Быстро – не нужно нажимать дополнительные кнопки.

❌ Минусы:
✖ Иногда пользователь может случайно отпустить мышку и зафиксировать неверную позицию.
✖ Если нужно точное позиционирование, трудно откорректировать перед фиксацией.

🔍 Пример кода (Pseudocode)
python
Копировать
Редактировать
def on_mouse_release(event):
    cut_position = event.x  # Получаем X-координату разреза
    project.add_action_to_image(image_index, Action("cut", cut_position))
🔹 2. Фиксировать разрез после нажатия кнопки (Confirm Button)
📌 Как работает:

Пользователь перетаскивает линию разреза, но она не фиксируется сразу.
Разрез остается редактируемым.
Когда пользователь нажимает "Применить", разрез фиксируется.
✅ Плюсы:
✔ Позволяет корректировать разрез перед фиксацией.
✔ Меньше случайных ошибок – пользователь явно подтверждает действие.

❌ Минусы:
✖ Дополнительный клик – не так быстро, как фиксация по отпусканию мышки.
✖ Нужно следить за состоянием – пока разрез не подтвержден, он остается временным.

🔍 Пример кода (Pseudocode)
# Храним временную позицию разреза
temporary_cut_position = None

def on_mouse_drag(event):
    global temporary_cut_position
    temporary_cut_position = event.x  # Перемещение линии разреза

def on_confirm_button_click():
    if temporary_cut_position is not None:
        project.add_action_to_image(image_index, Action("cut", temporary_cut_position))
🎯 Какой вариант лучше в твоем случае?
🔥 Оптимальное решение:

Если разрезы обычно не требуют высокой точности → фиксируй по отпусканию мышки (on_mouse_release).
Если пользователю важно точное позиционирование → используй кнопку "Применить".
Лучший вариант: Комбинировать оба подхода!
При отпускании мыши показывать "призрачный" разрез (не фиксировать сразу).
Дать возможность подтвердить или отменить его через кнопку.
Как тебе такой вариант? 😃


Вы сказали:
С точки зрения интерфейса, нужно ли при разрезе визуально поделить лист или просто нарисовать линию потолще
или другим цветом?

🔥 Отличный вопрос! Всё зависит от того, как ты хочешь передать пользователю информацию о разрезе.
Рассмотрим две стратегии визуализации и разберём их плюсы и минусы.

🔹 1. Просто нарисовать линию разреза (толстую или цветную)
📌 Как это работает?

При добавлении разреза на изображение рисуется жирная линия или линия другого цвета.
Линия остаётся видимой, но сам лист визуально не делится.
✅ Плюсы:
✔ Минимальный визуальный шум – изображение остаётся цельным.
✔ Пользователь сразу видит, где проходит разрез.
✔ Можно использовать разные цвета для разных типов разрезов (например, синий – черновой разрез, красный – финальный).

❌ Минусы:
✖ Не так наглядно – пользователь не видит, как именно разрежется изображение.
✖ Если много разрезов, интерфейс может выглядеть захламлённым.

🔹 2. Визуально разделить лист на части (размытие, затемнение, прозрачность)
📌 Как это работает?

При разрезе лист визуально делится на части (например, можно слегка затемнить или размыть неактивную область).
Опционально можно добавить раздвижной эффект, чтобы части немного расходились.
✅ Плюсы:
✔ Очень наглядно – пользователь сразу понимает, как будет выглядеть результат.
✔ Можно добавить анимацию, чтобы части немного расходились при разрезе.
✔ Хорошо подходит, если разрез финальный (а не просто вспомогательный).

❌ Минусы:
✖ Может выглядеть сложно и перегруженно, особенно если разрезов много.
✖ Реализация чуть сложнее (особенно если добавлять анимацию).

🎯 Какой вариант выбрать?
🔥 Лучший вариант – комбинировать подходы!

🔹 Пока пользователь редактирует разрез (двигает линию) → рисовать просто линию (тонкую, цветную).
🔹 После подтверждения разреза → разделить лист визуально (например, лёгким затемнением неактивных частей).

🔍 Как это может выглядеть?
Во время редактирования – просто тонкая синяя линия.
При подтверждении – линия становится красной и жирной, а изображение слегка затемняется по краям.
Если разрез можно двигать – показывать "призрачные" границы или анимацию разделения.
🚀 Вывод
🔹 Просто цветная линия – если разрез временный и нужен только для ориентации.
🔹 Визуальное разделение листа – если важно показать эффект разреза.
🔹 Комбинированный вариант – лучшее решение, так как он интуитивный и гибкий.
📌 Хочешь, могу помочь с кодом для визуализации? 😃


Отлично, метод работает, теперь мне нужно на изображении добавить горизонтальную линию, которую можно передвигать, чтобы проверить точность автоматической установки угла, и какой-то маркер для того, чтобы поворачивать изображение, после этого сообщения я приведу код метода, который предположительно делает часть этой работы, дополни его пожалуйста

Вот код, который добавляет эти элементы и обрабатывает вращение:

1. Метод add_rotation_handle()
Этот метод создаст:

Кружок (контрольную точку) — объект QGraphicsEllipseItem, который будет размещаться сверху изображения.
Горизонтальную линию — QGraphicsLineItem на уровне изображения.
python
Копировать
Редактировать
def add_rotation_handle(self):
    if self.rotation_handle is not None:
        return  # Уже добавлено

    # Координаты для кружка (немного выше центра изображения)
    x = self.pixmap_item.boundingRect().center().x()
    y = self.pixmap_item.boundingRect().top() - 20  # Немного выше изображения
    radius = 10  # Размер кружка

    # Создаём кружок (ручку для вращения)
    self.rotation_handle = QGraphicsEllipseItem(-radius, -radius, 2 * radius, 2 * radius)
    self.rotation_handle.setBrush(Qt.blue)
    self.rotation_handle.setZValue(2)  # Поверх изображения
    self.rotation_handle.setPos(x, y)
    self.scene.addItem(self.rotation_handle)

    # Горизонтальная линия для сравнения
    line_x1 = self.pixmap_item.boundingRect().left()
    line_x2 = self.pixmap_item.boundingRect().right()
    line_y = self.pixmap_item.boundingRect().top() + self.pixmap_item.boundingRect().height() / 2
    self.rotation_line = QGraphicsLineItem(line_x1, line_y, line_x2, line_y)
    self.rotation_line.setPen(Qt.red)
    self.scene.addItem(self.rotation_line)

    # Сохраняем действие
    self.current_action = Action(type='rotate', value=0, final=False)
    self.add_action()
2. Метод mouseMoveEvent() (Обработка вращения)
Добавим обработку вращения при перетаскивании кружка.

Обновленный mouseMoveEvent()
Добавим перемещение rotation_handle вместе с изображением:

python
Копировать
Редактировать
def mouseMoveEvent(self, event):
    if self.current_action is None:
        return
    if self.current_action.final:
        self.mouse_press_pos = None
        return

    # Вращение изображения при перемещении кружка
    if self.mouse_press_pos is not None and self.current_step == 4:  # Новый шаг для вращения
        center = self.pixmap_item.mapToScene(self.pixmap_item.boundingRect().center())  # Центр изображения
        new_pos = event.scenePos()  # Получаем новую позицию мыши в сцене

        # Вычисляем угол между центром изображения и позицией мыши
        dx = new_pos.x() - center.x()
        dy = new_pos.y() - center.y()
        angle = math.degrees(math.atan2(dy, dx))  # Угол в градусах

        # Устанавливаем угол поворота для изображения
        self.pixmap_item.setRotation(angle)

        # Перемещаем rotation_handle в новую позицию
        radius = 20  # Радиус от центра изображения до ручки
        handle_x = center.x() + radius * math.cos(math.radians(angle))
        handle_y = center.y() + radius * math.sin(math.radians(angle))
        self.rotation_handle.setPos(handle_x, handle_y)

        # Сохраняем угол в current_action
        self.current_action.value = angle

        # Запоминаем последнюю позицию мыши
        self.mouse_press_pos = event.pos()
Что исправлено?
✅ Используется mapToScene, чтобы учитывать смещение изображения.
✅ Кружок теперь перемещается по кругу, а не остается в одном месте.
✅ Поворот теперь плавный и правильный.

Теперь при перемещении кружка он красиво двигается вокруг центра изображения. 🚀

Попробуй и скажи, если что-то не так! 😎
3. Метод apply_action() (Восстановление вращения)
Теперь, когда вращение сохранено, нужно правильно его применять.

python
Копировать
Редактировать
elif self.current_action.type == 'rotate':
    angle = self.current_action.value

    # Устанавливаем поворот
    self.pixmap_item.setRotation(angle)
    self.rotation_handle.setRotation(angle)
Как это работает?
Добавляем add_rotation_handle() → создаёт кружок и горизонтальную линию.
Перетаскиваем кружок (mouseMoveEvent) → изменяет угол.
Сохраняем угол в self.current_action.value.
При apply_action() восстанавливаем угол.
Теперь изображение можно немного вращать! 😎
Попробуй внедрить код и скажи, если что-то не так. 🚀

from PIL import Image

def crop_image_with_negative_x(input_file, output_file, crop_params):
    """
    Обрезает изображение с учетом отрицательной координаты x.

    :param input_file: Имя входного файла изображения
    :param output_file: Имя выходного файла изображения
    :param crop_params: Кортеж (x, y, width, height)
    """
    # Открываем изображение
    image = Image.open(input_file)
    width, height = image.size
    x, y, crop_width, crop_height = crop_params

    # Если x отрицательный, добавляем слева пустую область
    if x < 0:
        # Создаем новое изображение с увеличенной шириной
        new_width = width + abs(x)
        new_image = Image.new("RGB", (new_width, height), (255, 255, 255))  # Белый фон
        new_image.paste(image, (abs(x), 0))  # Вставляем исходное изображение справа
        image = new_image
        x = 0  # Теперь x начинается с 0

    # Проверяем, чтобы координаты не выходили за границы изображения
    x = max(0, x)
    y = max(0, y)
    crop_width = min(crop_width, image.width - x)
    crop_height = min(crop_height, image.height - y)

    # Выполняем обрезку
    cropped_image = image.crop((x, y, x + crop_width, y + crop_height))

    # Сохраняем результат
    cropped_image.save(output_file)

# Пример использования
crop_image_with_negative_x(
    input_file="input_image.jpg",
    output_file="output_image.jpg",
    crop_params=(-10, 20, 100, 150)  # Пример: x отрицательный
)